from django.shortcuts import reverse, render , redirect
from django.views.generic import (ListView, CreateView, DeleteView, UpdateView)
from .forms import UserRegisterForm, UserUpdateForm, ProfileUpdateForm
from users.models import Lawyers,Clients,Profile
from multiprocessing import context
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages
from django.contrib.auth.models import Group
from django.contrib.auth import views as auth_views
from django.urls import reverse_lazy
from django.contrib.auth.mixins import UserPassesTestMixin
from dashboard import urls,views

# This decorator is used to ensure that a user can only visit a given page having logged in
# The decorator extends the functionality of the function profile
from django.contrib.auth.decorators import login_required

def checktype(request):
    return request.user.email.endswith('@nyayadhwani.com')
    
    
    # if request.method=="POST":
    #     return redirect('users/profile')
    
class checksuper(UserPassesTestMixin):
    def test_func(self): # nw
        return self.request.user.is_superuser
    

def dashboard(request):
    if checktype(request):
        return redirect('dashboard:lawyers')
    
    
    else:
        return redirect('dashboard:clients')

def register(request):
    if request.method == 'POST':
        form = UserRegisterForm(request.POST)
        if form.is_valid():
            # This saves the user that has been created
            form.save()
            username = form.cleaned_data.get('username')
            user = form.save()
            Profile.objects.create(**{'user': user})
            messages.success(request, f' Your Account  has been created Successfully. Login to view the site {username} !')
            return redirect('users:login')
    else:
        form = UserRegisterForm()
    return render(request, 'users/register.html', {'form': form})

# This will ensure that one can only visit this page having logged in
@login_required
def profile(request):
    # The instance in this case populates the Update Post wuth initial details of the User.
    if request.method == 'POST':
        u_form = UserUpdateForm(request.POST, instance=request.user)
        p_form = ProfileUpdateForm(request.POST, request.FILES, instance=request.user.profile)
        if u_form.is_valid() and p_form.is_valid():
            u_form.save()
            p_form.save()
            messages.success(request, f'Your account has been updated')
            return redirect('users:profile')
    else:  
        u_form = UserUpdateForm(instance=request.user)
        p_form = ProfileUpdateForm(instance=request.user.profile)      
    context = {
            'u_form': u_form,
            'p_form' : p_form

    }
    return render(request, 'users/profile.html', context)

# Clients Views

class ClientsCreateView(checksuper,CreateView):
    # it will act on the database table "client"
    model = Clients
    # It will require the following fields
    fields = ['first_name', 'last_name', 'phone_number', 'email', 'username']
    # It will display the user creation form generated by the view on the "user_detail.html"
    template_name = 'users/user_detail.html'

    # The url to be redirected to after a new client is successfully added
    def get_success_url(self):
        # redirect user back to the page displaying a list of courses
        return reverse('clients-list')

    # data is passed to the HTML/templates page in a context
    # override this method to get access to the context
    # and its data
    def get_context_data(self, **kwargs):
        # Call the base implementation first to get a context
        context = super().get_context_data(**kwargs)
        # add/create a new context variable called "table_title"
        # this variable can then be accessed on the template
        context['table_title'] = 'Add New Clients'
        return context


# The view to display the list of clients, it will inherit from the django built in ListView
# it will get its data from the clients database table and display the data to the users_list.html
# page and data will be accessed on the page using the "object_list" variable object
class ClientsListView(checksuper,ListView):
    model = Clients
    template_name = 'users/users_list.html'



    # overrides this method so as to add custom data to the context object that will be pushed to the
    # HTML page displaying the data
    def get_context_data(self, **kwargs):
        # Call the base implementation first to get a context
        context = super().get_context_data(**kwargs)
        context['table_title'] = 'Clients'
        context['objects_update'] = 'users:clients-update'
        context['objects_delete'] = 'users:clients-delete'
        return context


# The view to be used to delete a Clients, it will accept the "pk" as the variable holding the user_id
# it will inherit from the django built in DeleteView, it will perform the operation on the Clients
# database table and will request a user to confirm the deletion operation on the confirm_delete.html
# It will finally state the url where a user is redirected after a successful deletion
class ClientsDeleteView(checksuper,DeleteView):
    model = Clients
    success_url = '/users/clients'
    template_name = 'users/confirm_delete.html'

    # overrides this method so as to add custom data to the context object that will be pushed to the
    # HTML page displaying the data
    def get_context_data(self, **kwargs):
        # Call the base implementation first to get a context
        context = super().get_context_data(**kwargs)
        context['title'] = 'Delete Client'
        name = Clients.objects.get(pk=self.kwargs.get('pk')).get_full_name()
        context['message'] = f'Are you sure you want to delete the Client "{name}"'
        context['cancel_url'] = 'clients-list'
        return context


# This view will be used to update the Clients details
class ClientsUpdateView(checksuper,UpdateView):
    model = Clients
    fields = ['first_name', 'last_name', 'phone_number', 'email', 'username']
    template_name = 'users/user_detail.html'

    def get_success_url(self):
        return reverse('clients-list')

    def get_context_data(self, **kwargs):
        # Call the base implementation first to get a context
        context = super().get_context_data(**kwargs)
        context['table_title'] = 'Update Client'
        return context
    
# Lawyers Views
# -----------------------------------------------------------------------------------------------------------------------------------------

# The view to create a Clients, it will inherit from the django built in CreateView
class LawyersCreateView(checksuper,CreateView):
    model = Lawyers
    fields = ['first_name', 'last_name', 'phone_number', 'email', 'username']
    template_name = 'users/user_detail.html'

    def get_success_url(self):
        return reverse('lawyers-list')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['table_title'] = 'Add New lawyer'
        return context

class LawyersListView(checksuper,ListView):
    model = Lawyers
    template_name = 'users/users_list.html'

    def get_context_data(self, **kwargs):
        # Call the base implementation first to get a context
        context = super().get_context_data(**kwargs)
        context['table_title'] = 'Lawyers'
        context['objects_update'] = 'users:lawyers-update'
        context['objects_delete'] = 'users:lawyers-delete'
        return context


class LawyersDeleteView(checksuper,DeleteView):
    model = Lawyers
    template_name = 'users/confirm_delete.html'

    def get_success_url(self):
        return reverse('lawyers-list')

    # overrides this method so as to add custom data to the context object that will be pushed to the
    # HTML page displaying the data
    def get_context_data(self, **kwargs):
        # Call the base implementation first to get a context
        context = super().get_context_data(**kwargs)
        context['title'] = 'Delete Lawyer'
        name = Lawyers.objects.get(pk=self.kwargs.get('pk')).get_full_name()
        context['message'] = f'Are you sure you want to delete the lawyer "{name}"'
        context['cancel_url'] = 'lawyers-list'
        return context


class LawyersUpdateView(checksuper,UpdateView):
    model = Lawyers
    fields = ['first_name', 'last_name', 'phone_number', 'email', 'username']
    template_name = 'users/user_detail.html'

    def get_success_url(self):
        return reverse('lawyers-list')

    def get_context_data(self, **kwargs):
        # Call the base implementation first to get a context
        context = super().get_context_data(**kwargs)
        context['table_title'] = 'Update Lawyer'
        return context